// JSON Parser Module Script

// internal methods
#define EASYJSON_TOKENGUESS 64

// Allocates a fresh unused token from the token pool.
JsonToken *_json_alloc_token(JsonParser *parser, JsonToken *tokens[], int num_tokens) {
  JsonToken *tok;
  if (parser.toknext >= num_tokens) {
    return null;
  }
  tok = tokens[parser.toknext];
  parser.toknext = parser.toknext+1;
  tok.end = -1;
  tok.start = -1;
  tok.size = 0;
  tok.parent = -1;
  return tok;
}

// Fills token type and boundaries.
void _json_fill_token(JsonToken *token, JsonTokenType type, int start, int end) {
  token.type = type;
  token.start = start;
  token.end = end;
  token.size = 0;
}

// part of _json_parse_primitive.
int _parse_found(int start, JsonParser *parser, String json_string, int len, JsonToken *tokens[], int num_tokens){
  JsonToken *token;
  if (tokens == null) {
    parser.pos--;
    return 0;
  }
  token = _json_alloc_token(parser, tokens, num_tokens);
  if (token == null) {
    parser.pos = start;
    return eJSON_Error_InsuficientTokens;
  }
  _json_fill_token(token, eJSON_Tok_PRIMITIVE, start, parser.pos);

  token.parent = parser.toksuper;
  parser.pos--;
  return 0;
}

// Fills next available token with JSON primitive.
int _json_parse_primitive(JsonParser *parser, String json_string, int len, JsonToken *tokens[], int num_tokens) {
  JsonToken *token;
  int start;

  start = parser.pos;

  for (; parser.pos < len && json_string.Chars[parser.pos] != 0; parser.pos++) {
    switch (json_string.Chars[parser.pos]) {

    /* In strict mode primitive must be followed by "," or "}" or "]" */
//    case ':':
    case 20: /* '\t' */
    case 18: /* '\r' */
    case 14: /* '\n' */
    case ' ':
    case ',':
    case ']':
    case '}':
      return _parse_found(start, parser, json_string, len, tokens, num_tokens);
    default:
                   /* to quiet a warning from gcc*/
      break;
    }
    if (json_string.Chars[parser.pos] < 32 || json_string.Chars[parser.pos] >= 127) {
      parser.pos = start;
      return eJSON_Error_InvalidCharacter;
    }
  }
  return _parse_found(start, parser, json_string, len, tokens, num_tokens);
}

// Fills next token with JSON string.
int _json_parse_string(JsonParser *parser, String json_string, int len, JsonToken *tokens[], int num_tokens) {
  JsonToken *token;

  int start = parser.pos;

  /* Skip starting quote */
  parser.pos++;
  
  for (; parser.pos < len && json_string.Chars[parser.pos] != 0; parser.pos++) {
    char c = json_string.Chars[parser.pos];

    /* Quote: end of string */
    if (c == '"') {
      if (tokens == null) {
        return 0;
      }
      token = _json_alloc_token(parser, tokens, num_tokens);
      if (token == null) {
        parser.pos = start;
        return eJSON_Error_InsuficientTokens;
      }
      _json_fill_token(token, eJSON_Tok_STRING, start + 1, parser.pos);
      token.parent = parser.toksuper;
      return 0;
    }

    /* Backslash: Quoted symbol expected */
    if (c == 92 && parser.pos + 1 < len) {
      parser.pos++;
      switch (json_string.Chars[parser.pos]) {
      /* Allowed escaped symbols */
      case '"':
      case '/':
      case 92:
      case 'b':
      case 'f':
      case 'r':
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser.pos++;
        for (int i = 0; i < 4 && parser.pos < len && json_string.Chars[parser.pos] != 0; i++) {
          /* If it isn't a hex character we have an error */
          if (!((json_string.Chars[parser.pos] >= 48 && json_string.Chars[parser.pos] <= 57) ||   /* 0-9 */
                (json_string.Chars[parser.pos] >= 65 && json_string.Chars[parser.pos] <= 70) ||   /* A-F */
                (json_string.Chars[parser.pos] >= 97 && json_string.Chars[parser.pos] <= 102))) { /* a-f */
            parser.pos = start;
            return eJSON_Error_InvalidCharacter;
          }
          parser.pos++;
        }
        parser.pos--;
        break;
      /* Unexpected symbol */
      default:
        parser.pos = start;
        return eJSON_Error_InvalidCharacter;
      }
    }
  }
  parser.pos = start;
  return eJSON_Error_Partial;
}

////  PUBLIC METHODS

// helper to create array of tokens
static JsonToken* [] JsonToken::NewArray(int count)
{
  JsonToken* tks[];
  tks = new JsonToken[count];
  for(int i=0; i<count; i++) tks[i] = new JsonToken;
  return tks;
}

String JsonToken::ToString(String json_string)
{
  return json_string.Substring(this.start, this.end-this.start);
}

String get_TypeAsString(this JsonToken*)
{
  switch(this.type)
  {
    case eJSON_Tok_OBJECT: return "Object"; break;
    case eJSON_Tok_ARRAY: return "Array"; break;
    case eJSON_Tok_PRIMITIVE: return "Primitive"; break;
    case eJSON_Tok_STRING: return "String"; break;
    case eJSON_Tok_UNDEFINED: return "Undefined"; break;
  }
  return "Error";
}


// Parse JSON string and fill tokens.
int JsonParser::Parse(String json_string, JsonToken *tokens[], int num_tokens) {
  int r;
  JsonToken *t;
  JsonToken *token;
  int count = this.toknext;
  int len = json_string.Length;

  if(!this._IsNotReset) {
    this.toksuper = -1;
    this.toknext = 0;
    this.pos = 0;
    this._IsNotReset = true;
  }

  for (; this.pos < len && json_string.Chars[this.pos] != 0; this.pos++) {
    char c;
    JsonTokenType type;

    c = json_string.Chars[this.pos];

    switch (c) {
    case '{':
    case '[':
      count++;
      if (tokens == null) {
        break;
      }
      token = _json_alloc_token(this, tokens, num_tokens);
      if (token == null) {
        return eJSON_Error_InsuficientTokens;
      }
      if (this.toksuper != -1) {
        t = tokens[this.toksuper];

        /* In strict mode an object or array can't become a key */
        if (t.type == eJSON_Tok_OBJECT) {
          return eJSON_Error_InvalidCharacter;
        }

        t.size++;
        token.parent = this.toksuper;
      }
      if(c == '{') token.type = eJSON_Tok_OBJECT;
      else token.type = eJSON_Tok_ARRAY;
      token.start = this.pos;
      this.toksuper = this.toknext - 1;
      break;
    case '}':
    case ']':
      if (tokens == null) {
        break;
      }

      if(c == '}') type = eJSON_Tok_OBJECT;
      else type = eJSON_Tok_ARRAY;

      if (this.toknext < 1) {
        return eJSON_Error_InvalidCharacter;
      }
      token = tokens[this.toknext - 1];
      for (;;) {
        if (token.start != -1 && token.end == -1) {
          if (token.type != type) {
            return eJSON_Error_InvalidCharacter;
          }
          token.end = this.pos + 1;
          this.toksuper = token.parent;
          break;
        }
        if (token.parent == -1) {
          if (token.type != type || this.toksuper == -1) {
            return eJSON_Error_InvalidCharacter;
          }
          break;
        }
        token = tokens[token.parent];
      }
      break;
    case '"': /* '\"' */
      r = _json_parse_string(this, json_string, len, tokens, num_tokens);
      if (r < 0) {
        return r;
      }
      count++;
      if (this.toksuper != -1 && tokens != null) {
        tokens[this.toksuper].size++;
      }
      break;
    case 20: /* '\t' */
    case 18: /* '\r' */
    case 14: /* '\n' */
    case ' ':
      break;
    case ':':
      this.toksuper = this.toknext - 1;
      break;
    case ',':
      if (tokens != null && this.toksuper != -1 &&
          tokens[this.toksuper].type != eJSON_Tok_ARRAY &&
          tokens[this.toksuper].type != eJSON_Tok_OBJECT) {

        this.toksuper = tokens[this.toksuper].parent;

      }
      break;

    /* In strict mode primitives are: numbers and booleans */
    case '-':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case 't': /* true  */
    case 'f': /* false */
    case 'n': /* null  */
      /* And they must not be keys of the object */
      if (tokens != null && this.toksuper != -1) {
        t = null;
        t = tokens[this.toksuper];
        if (t.type == eJSON_Tok_OBJECT ||
            (t.type == eJSON_Tok_STRING && t.size != 0)) {
          return eJSON_Error_InvalidCharacter;
        }
      }

      r = _json_parse_primitive(this, json_string, len, tokens, num_tokens);
      if (r < 0) {
        return r;
      }
      count++;
      if (this.toksuper != -1 && tokens != null) {
        tokens[this.toksuper].size++;
      }
      break;

    default: /* Unexpected char in strict mode */
      return eJSON_Error_InvalidCharacter;
    }

  }

  if (tokens != null) {
    for (int i = this.toknext - 1; i >= 0; i--) {
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
        return eJSON_Error_Partial;
      }
    }
  }

  return count;
}

void JsonParser::Reset()
{
  this._IsNotReset = false;
}

